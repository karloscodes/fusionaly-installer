version: '3.8'

services:
  caddy:
    image: caddy:2.7-alpine
    container_name: infinity-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # For HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
    networks:
      - infinity-network

  infinity-web:
    build:
      context: .
      dockerfile: Dockerfile
    image: infinity-metrics:latest
    container_name: infinity-metrics
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - infinity_storage:/app/storage
      - infinity_logs:/app/logs
      - ./litestream.yml:/app/litestream.yml:ro
    environment:
      - INFINITY_METRICS_ENV=production
      - INFINITY_METRICS_STORAGE_PATH=/app/storage
      - INFINITY_METRICS_GEO_DB_PATH=/app/storage/GeoLite2-City.mmdb
      - INFINITY_METRICS_PUBLIC_DIR=/app/web/dist
      - INFINITY_METRICS_LOGS_DIR=/app/logs
      - INFINITY_METRICS_LOG_LEVEL=info
      - INFINITY_METRICS_APP_PORT=8080
      - INFINITY_METRICS_LICENSE_KEY=${INFINITY_METRICS_LICENSE_KEY:-LICENSE-DEMO-1234-5678-ABCD}
      - SERVER_INSTANCE_ID=${HOSTNAME:-infinity}-$(date +%s)
      - TZ=UTC
      - ENABLE_BACKUPS=${ENABLE_BACKUPS:-false}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION:-us-east-1}
    networks:
      - infinity-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/_health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./caddy
  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./caddy
  infinity_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./storage
  infinity_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

networks:
  infinity-network:
    driver: bridge
